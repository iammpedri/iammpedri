const { EmbedBuilder } = require('discord.js');

module.exports = {
name: 'ban',
description: 'Bane um usuÃ¡rio por violaÃ§Ã£o de regras.',
execute: async function (message) {
if (!message.member.permissions.has('BAN_MEMBERS')) {
await message.reply('VocÃª nÃ£o tem permissÃ£o para banir usuÃ¡rios.').then(msg => setTimeout(() => msg.delete(), 300000));
return;
}

const member = message.mentions.members.first();
const channelMention = message.mentions.channels.first();

if (!member || !channelMention) {
  await message.reply('VocÃª precisa mencionar um usuÃ¡rio e um canal para banir.').then(msg => setTimeout(() => msg.delete(), 300000));
  return;
}

const filter = (response) => response.author.id === message.author.id;

// Pergunta o motivo do ban
await message.reply('Por favor, informe o motivo do ban.').then(msg => setTimeout(() => msg.delete(), 300000));

const motivoCollector = message.channel.createMessageCollector({ filter, max: 1, time: 30000 });

motivoCollector.on('collect', async (motivoMessage) => {
  const motivo = motivoMessage.content || 'Motivo nÃ£o especificado';
  await motivoMessage.delete();

  // Pergunta a duraÃ§Ã£o do ban
  await message.reply('Por favor, informe a duraÃ§Ã£o do ban em minutos, horas ou dias (ex: "30m", "2h", "1d") ou "permanente" para banir indefinidamente.').then(msg => setTimeout(() => msg.delete(), 300000));

  const tempoCollector = message.channel.createMessageCollector({ filter, max: 1, time: 30000 });

  tempoCollector.on('collect', async (tempoMessage) => {
    const tempoInput = tempoMessage.content;
    await tempoMessage.delete();

    let tempo = 0;
    let tempoTexto = '';

    if (tempoInput.toLowerCase() === 'permanente') {
      tempoTexto = 'Permanente';
    } else if (tempoInput.endsWith('m')) {
      tempo = parseInt(tempoInput.replace('m', '')) * 60 * 1000; // Minutos para milissegundos
      tempoTexto = tempoInput.replace('m', ' minutos');
    } else if (tempoInput.endsWith('h')) {
      tempo = parseInt(tempoInput.replace('h', '')) * 60 * 60 * 1000; // Horas para milissegundos
      tempoTexto = tempoInput.replace('h', ' horas');
    } else if (tempoInput.endsWith('d')) {
      tempo = parseInt(tempoInput.replace('d', '')) * 24 * 60 * 60 * 1000; // Dias para milissegundos
      tempoTexto = tempoInput.replace('d', ' dias');
    } else {
      await message.reply('Formato invÃ¡lido. Use "m" para minutos, "h" para horas, "d" para dias ou "permanente".').then(msg => setTimeout(() => msg.delete(), 300000));
      return;
    }

    const nickname = member.nickname || member.user.username;
    const userId = member.id;
    const avatarUrl = member.user.displayAvatarURL({ dynamic: true });

    const embed = new EmbedBuilder()
      .setColor('#FF4444') // Cor vermelha para ban
      .setTitle('UsuÃ¡rio Banido')
      .setDescription(`<a:blobban:1297280754304421969> â€¢ VocÃª foi banido por violar as Diretrizes e Termos de Conduta do Discord.`)
      .setThumbnail(avatarUrl)
      .addFields(
        { name: '<:userr:1297205118281715732> â€¢ UsuÃ¡rio', value: `${nickname}`, inline: true },
        { name: 'ðŸ‘® â€¢ ID do UsuÃ¡rio', value: `${userId}`, inline: true },
        { name: '<a:blobpolice:1297280706677837824> â€¢ Banido por', value: `${message.author.tag}`, inline: true },
        { name: 'ðŸ“ƒ â€¢ Motivo', value: motivo, inline: false },
        { name: '<a:relogio:1297283446233759876> â€¢ DuraÃ§Ã£o', value: tempoTexto, inline: false }
      )
      .setFooter({ text: 'Sistema de ModeraÃ§Ã£o AutomÃ¡tica' })
      .setTimestamp();

    try {
      // Banir o usuÃ¡rio
      await member.ban({ reason: motivo });
      await channelMention.send({ embeds: [embed] });

      if (tempoTexto !== 'Permanente') {
        // Se o ban nÃ£o for permanente, defina um timeout para desbanir o usuÃ¡rio apÃ³s o tempo especificado
        setTimeout(async () => {
          try {
            await message.guild.members.unban(userId);
            await channelMention.send(`O usuÃ¡rio ${nickname} foi desbanido apÃ³s cumprir a puniÃ§Ã£o.`);
          } catch (err) {
            console.error(err);
          }
        }, tempo);
      }

      await message.reply(`${member} foi banido com sucesso por ${tempoTexto}!`).then(msg => setTimeout(() => msg.delete(), 300000));
      await message.delete(); // Deleta a mensagem original
    } catch (err) {
      await message.reply('Ocorreu um erro ao tentar banir o usuÃ¡rio.').then(msg => setTimeout(() => msg.delete(), 300000));
    }
  });

  tempoCollector.on('end', (collected, reason) => {
    if (reason === 'time') {
      message.reply('Tempo esgotado para fornecer a duraÃ§Ã£o.').then(msg => setTimeout(() => msg.delete(), 300000));
    }
  });
});

motivoCollector.on('end', (collected, reason) => {
  if (reason === 'time') {
    message.reply('Tempo esgotado para fornecer o motivo.').then(msg => setTimeout(() => msg.delete(), 300000));
  }
});
}